exit
n
s
to_promote
s
self.position[0]
self.color
s
self.kinged
self.class
self.position[0]
self.position
self.color
exit
@cell.flatten.select { |x| x.class == Pawn && x.position == [6,0] }
@cell.flatten.select { |x| x.class == Pawn && x.kinged == true }
exit
self.cell.flatten.select { |x| !x.nil? && x.color == color }
self.cell.flatten.select { |x| x.class == Piece && x.color == color }
self.cell.selecself.cell.flatten.select { |x| x.class == Piece && x.color == color }
self.cell
self
color
exit
piece.color != colors_turn
piece.nil?
piece
from
piece
exit
to_piece.class
self.position
n
s
self.position
exit
self.position
self.moves
self.position
s
self.position
n
s
self.position
s
from_piece.position
self.position
s
self.position
s
self.board.cell[3][5].position
to
to[0]
self.board.cell[3][5].class
to
s
to
from
self.position
s
from
to
self.class
s
self.class
self.position
move
s
self.position
up
piece.position
up
self.position
s
from_piece.position
s
to_piece.position
self.position
s
self.position
s
self.position
s
piece.class
piece.position
move
piece.moves
move
move[0]
move[0
to
exit
self.cell[5][5].moves
self.cell[5][5].position
self.cell[4][6].position
self.cell[4][6].moves
self.cell[6][0].moves
self.cell[1][0].moves
self.cell[0][1].moves
@cell
self
self.id
self.obj_id
self.class
exit
self.position
from_piece.position
from_piece
self.moves
self.position
response
reponse
n
s
move
piece.moves
n
s
piece.moves
piece.position
piece.has_moved
piece.moves
s
move
piece.position
piece.moves
piece.class
n
piece.move_will_leave_in_check?(piece.position, move, color)
piece.move_will_leave_in_check?(piece.position, move, color) == false
piece.position
piece.moves
s
pp piece.board.cell
piece.position
piece
s
self.board.cell
require pp
require "pp"
pp self.board
self.board
n
s
piece.move_will_leave_in_check?(piece.position, move, color)
piece.moves
piece.position
piece.icon
move
exit
continue
value
continue
value
continue
value
continue
value
continue
n
self.position
possible_moves
n
self.position
n
self.position
self.moves
exit
self.board.cell[(self.position[0])][self.position[1]].position
self.board.cell[(self.position[0])+1][self.position[1]].position
self.board.cell[(self.position[0])+1][self.position[1]]
exit
info program
info line
info
help
finish
display
s
continue
break
backtrace
info breakpoints
info
set
show
up
var
var global
var local
var args
var instance
var
t
n
nn
n
s
self.icon
self.color
n
s
@unique_moves
s
self.color
s
self.has_moved
s
exit
s
self.has_moved
exit
self.has_moved
s
@unique_moves
self.color
exit
s
n
s
piece.moved
s
piece
s
piece.icon
piece
piece.class
piece.moved
exit
piece.moves
piece.position
piece
exit
piece.moves
piece
move
exit
n
piece.class
piece.position
move
n
s
n
s
black_king
white_king
n
white_king
s
n
sn
s
colors_turn
to
from
